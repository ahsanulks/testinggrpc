// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: math.proto

package protofile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddServiceClient is the client API for AddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddServiceClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Multiply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CountDown(ctx context.Context, in *CountDownRequest, opts ...grpc.CallOption) (AddService_CountDownClient, error)
	MultipleSum(ctx context.Context, opts ...grpc.CallOption) (AddService_MultipleSumClient, error)
	RealtimeMultipleSum(ctx context.Context, opts ...grpc.CallOption) (AddService_RealtimeMultipleSumClient, error)
}

type addServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddServiceClient(cc grpc.ClientConnInterface) AddServiceClient {
	return &addServiceClient{cc}
}

func (c *addServiceClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.AddService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Multiply(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.AddService/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) CountDown(ctx context.Context, in *CountDownRequest, opts ...grpc.CallOption) (AddService_CountDownClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddService_ServiceDesc.Streams[0], "/proto.AddService/CountDown", opts...)
	if err != nil {
		return nil, err
	}
	x := &addServiceCountDownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AddService_CountDownClient interface {
	Recv() (*CountDownResponse, error)
	grpc.ClientStream
}

type addServiceCountDownClient struct {
	grpc.ClientStream
}

func (x *addServiceCountDownClient) Recv() (*CountDownResponse, error) {
	m := new(CountDownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addServiceClient) MultipleSum(ctx context.Context, opts ...grpc.CallOption) (AddService_MultipleSumClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddService_ServiceDesc.Streams[1], "/proto.AddService/MultipleSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &addServiceMultipleSumClient{stream}
	return x, nil
}

type AddService_MultipleSumClient interface {
	Send(*MultipleSumRequest) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type addServiceMultipleSumClient struct {
	grpc.ClientStream
}

func (x *addServiceMultipleSumClient) Send(m *MultipleSumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addServiceMultipleSumClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addServiceClient) RealtimeMultipleSum(ctx context.Context, opts ...grpc.CallOption) (AddService_RealtimeMultipleSumClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddService_ServiceDesc.Streams[2], "/proto.AddService/RealtimeMultipleSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &addServiceRealtimeMultipleSumClient{stream}
	return x, nil
}

type AddService_RealtimeMultipleSumClient interface {
	Send(*RealtimeMultipleSumRequest) error
	Recv() (*RealtimeMultipleSumRequest, error)
	grpc.ClientStream
}

type addServiceRealtimeMultipleSumClient struct {
	grpc.ClientStream
}

func (x *addServiceRealtimeMultipleSumClient) Send(m *RealtimeMultipleSumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addServiceRealtimeMultipleSumClient) Recv() (*RealtimeMultipleSumRequest, error) {
	m := new(RealtimeMultipleSumRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AddServiceServer is the server API for AddService service.
// All implementations must embed UnimplementedAddServiceServer
// for forward compatibility
type AddServiceServer interface {
	Add(context.Context, *Request) (*Response, error)
	Multiply(context.Context, *Request) (*Response, error)
	CountDown(*CountDownRequest, AddService_CountDownServer) error
	MultipleSum(AddService_MultipleSumServer) error
	RealtimeMultipleSum(AddService_RealtimeMultipleSumServer) error
	mustEmbedUnimplementedAddServiceServer()
}

// UnimplementedAddServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddServiceServer struct {
}

func (UnimplementedAddServiceServer) Add(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAddServiceServer) Multiply(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedAddServiceServer) CountDown(*CountDownRequest, AddService_CountDownServer) error {
	return status.Errorf(codes.Unimplemented, "method CountDown not implemented")
}
func (UnimplementedAddServiceServer) MultipleSum(AddService_MultipleSumServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipleSum not implemented")
}
func (UnimplementedAddServiceServer) RealtimeMultipleSum(AddService_RealtimeMultipleSumServer) error {
	return status.Errorf(codes.Unimplemented, "method RealtimeMultipleSum not implemented")
}
func (UnimplementedAddServiceServer) mustEmbedUnimplementedAddServiceServer() {}

// UnsafeAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddServiceServer will
// result in compilation errors.
type UnsafeAddServiceServer interface {
	mustEmbedUnimplementedAddServiceServer()
}

func RegisterAddServiceServer(s grpc.ServiceRegistrar, srv AddServiceServer) {
	s.RegisterService(&AddService_ServiceDesc, srv)
}

func _AddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AddService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Multiply(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_CountDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountDownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddServiceServer).CountDown(m, &addServiceCountDownServer{stream})
}

type AddService_CountDownServer interface {
	Send(*CountDownResponse) error
	grpc.ServerStream
}

type addServiceCountDownServer struct {
	grpc.ServerStream
}

func (x *addServiceCountDownServer) Send(m *CountDownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AddService_MultipleSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddServiceServer).MultipleSum(&addServiceMultipleSumServer{stream})
}

type AddService_MultipleSumServer interface {
	SendAndClose(*Response) error
	Recv() (*MultipleSumRequest, error)
	grpc.ServerStream
}

type addServiceMultipleSumServer struct {
	grpc.ServerStream
}

func (x *addServiceMultipleSumServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addServiceMultipleSumServer) Recv() (*MultipleSumRequest, error) {
	m := new(MultipleSumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AddService_RealtimeMultipleSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddServiceServer).RealtimeMultipleSum(&addServiceRealtimeMultipleSumServer{stream})
}

type AddService_RealtimeMultipleSumServer interface {
	Send(*RealtimeMultipleSumRequest) error
	Recv() (*RealtimeMultipleSumRequest, error)
	grpc.ServerStream
}

type addServiceRealtimeMultipleSumServer struct {
	grpc.ServerStream
}

func (x *addServiceRealtimeMultipleSumServer) Send(m *RealtimeMultipleSumRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addServiceRealtimeMultipleSumServer) Recv() (*RealtimeMultipleSumRequest, error) {
	m := new(RealtimeMultipleSumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AddService_ServiceDesc is the grpc.ServiceDesc for AddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AddService",
	HandlerType: (*AddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AddService_Add_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _AddService_Multiply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CountDown",
			Handler:       _AddService_CountDown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MultipleSum",
			Handler:       _AddService_MultipleSum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RealtimeMultipleSum",
			Handler:       _AddService_RealtimeMultipleSum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "math.proto",
}
